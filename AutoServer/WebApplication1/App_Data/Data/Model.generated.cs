//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by BLToolkit template for T4.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;

using BLToolkit.Data;
using BLToolkit.Data.DataProvider;
using BLToolkit.Data.Linq;
using BLToolkit.Data.Sql;
using BLToolkit.Data.Sql.SqlProvider;
using BLToolkit.DataAccess;
using BLToolkit.Mapping;

namespace App_Data.Data.Context
{
	using main;
	using modules;

	public partial class DataManager : DbManager
	{
		public Table<main.ClientProperties> main_ClientProperties { get { return this.GetTable<main.ClientProperties>(); } }
		public Table<main.Clients>          main_Clients          { get { return this.GetTable<main.Clients>();          } }
		public Table<modules.LevelModules>     modules_LevelModules     { get { return this.GetTable<modules.LevelModules>();     } }
		public Table<modules.Levels>           modules_Levels           { get { return this.GetTable<modules.Levels>();           } }
		public Table<modules.Ping>             modules_Ping             { get { return this.GetTable<modules.Ping>();             } }
		
		#region FreeTextTable

        public DataManager()
            : base("DataServer")
        {
            return;
        }

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}
		
		class FreeTextTableExpressionAttribute : TableExpressionAttribute
		{
			public FreeTextTableExpressionAttribute()
				: base("")
			{
			}
		
			public override void SetTable(SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs)
			{
				var aargs  = sqlArgs.ToArray();
				var arr    = ConvertArgs(member, aargs).ToList();
				var method = (MethodInfo)member;
				var sp     = new MsSql2008SqlProvider();
		
				{
					var ttype  = method.GetGenericArguments()[0];
					var tbl    = new SqlTable(ttype);
		
					var database     = tbl.Database     == null ? null : sp.Convert(tbl.Database,     ConvertType.NameToDatabase).  ToString();
					var owner        = tbl.Owner        == null ? null : sp.Convert(tbl.Owner,        ConvertType.NameToOwner).     ToString();
					var physicalName = tbl.PhysicalName == null ? null : sp.Convert(tbl.PhysicalName, ConvertType.NameToQueryTable).ToString();
		
					var name   = sp.BuildTableName(new StringBuilder(), database, owner, physicalName);
		
					arr.Add(new SqlExpression(name.ToString(), Precedence.Primary));
				}
		
				{
					var field = ((ConstantExpression)expArgs.First()).Value;
		
					if (field is string)
					{
						arr[0] = new SqlExpression(field.ToString(), Precedence.Primary);
					}
					else if (field is LambdaExpression)
					{
						var body = ((LambdaExpression)field).Body;
		
						if (body is MemberExpression)
						{
							var name = ((MemberExpression)body).Member.Name;
		
							name = sp.Convert(name, ConvertType.NameToQueryField).ToString();
		
							arr[0] = new SqlExpression(name, Precedence.Primary);
						}
					}
				}
		
				table.SqlTableType   = SqlTableType.Expression;
				table.Name           = "FREETEXTTABLE({6}, {2}, {3}) {1}";
				table.TableArguments = arr.ToArray();
			}
		}
		
		[FreeTextTableExpressionAttribute]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}
		
		[FreeTextTableExpressionAttribute]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}
		
		#endregion
	}

	namespace main
	{

		[TableName(Owner="main", Name="ClientProperties")]
		public partial class ClientProperties
		{
			/// <summary>
			/// ????? ???????
			/// </summary>
			                public string Address  { get; set; } // nvarchar(-1)
			/// <summary>
			/// Id ???????
			/// </summary>
			                public int    ClientId { get; set; } // int(10)
			/// <summary>
			/// ???????? ???????
			/// </summary>
			                public string Desc     { get; set; } // nvarchar(-1)
			[PrimaryKey(1)] public int    Id       { get; set; } // int(10)
			/// <summary>
			/// ??????? ?? ?????
			/// </summary>
			                public string Position { get; set; } // nvarchar(-1)

			// FK_ClientProperties_ClientId
			[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=false)]
			public main.Clients FK_ClientProperties_ClientId { get; set; }
		}

		[TableName(Owner="main", Name="Clients")]
		public partial class Clients
		{
			[Identity, PrimaryKey(1)] public int    Id       { get; set; } // int(10)
			/// <summary>
			/// ???
			/// </summary>
			                          public string Name     { get; set; } // nvarchar(50)
			/// <summary>
			/// ??????
			/// </summary>
			                          public string Password { get; set; } // nvarchar(50)

			// FK_ClientProperties_ClientId_main_BackReference
			[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true)]
			public IEnumerable<main.ClientProperties> ClientPropertiesClientIdmains { get; set; }

			// FK_LevelModules_ClientId_modules_BackReference
			[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true)]
			public IEnumerable<modules.LevelModules> LevelModulesClientIdmoduless { get; set; }

			// FK_Levels_ClientId_modules_BackReference
			[Association(ThisKey="Id", OtherKey="ClientId", CanBeNull=true)]
			public IEnumerable<modules.Levels> LevelsClientIdmoduless { get; set; }
		}
	}

	namespace modules
	{

		[TableName(Owner="modules", Name="LevelModules")]
		public partial class LevelModules
		{
			/// <summary>
			/// Id ???????
			/// </summary>
			                public int    ClientId           { get; set; } // int(10)
			/// <summary>
			/// ?????? ?????????????? ?????????
			/// </summary>
			                public bool   FirstAlertEnabled  { get; set; } // bit
			/// <summary>
			/// ??????? ??????? ??????????????
			/// </summary>
			                public double FirstAlertLevel    { get; set; } // float(53)
			[PrimaryKey(1)] public int    Id                 { get; set; } // int(10)
			/// <summary>
			/// ???????????? ???????
			/// </summary>
			                public double MaxLevel           { get; set; } // float(53)
			/// <summary>
			/// ??????????? ???????
			/// </summary>
			                public double MinLevel           { get; set; } // float(53)
			/// <summary>
			/// ??? ??????
			/// </summary>
			                public string ModuleName         { get; set; } // nvarchar(-1)
			/// <summary>
			/// ?????? ?????????????? ?????????
			/// </summary>
			                public bool   SecondAlertEnabled { get; set; } // bit
			/// <summary>
			/// ??????? ??????? ??????????????
			/// </summary>
			                public double SecondAlertLevel   { get; set; } // float(53)

			// FK_LevelModules_ClientId
			[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=false)]
			public main.Clients FK_LevelModules_ClientId { get; set; }
		}

		[TableName(Owner="modules", Name="Levels")]
		public partial class Levels
		{
			/// <summary>
			/// Id ???????
			/// </summary>
			                          public int      ClientId     { get; set; } // int(10)
			/// <summary>
			/// ???? ?????????
			/// </summary>
			                          public DateTime CreationDate { get; set; } // datetime(3)
			[Identity, PrimaryKey(1)] public int      Id           { get; set; } // int(10)
			/// <summary>
			/// ?????????? ????????
			/// </summary>
			                          public double   Level        { get; set; } // float(53)
			/// <summary>
			/// ??? ??????
			/// </summary>
			                          public string   ModuleName   { get; set; } // nvarchar(-1)

			// FK_Levels_ClientId
			[Association(ThisKey="ClientId", OtherKey="Id", CanBeNull=false)]
			public main.Clients FK_Levels_ClientId { get; set; }
		}

		[TableName(Owner="modules", Name="Ping")]
		public partial class Ping
		{
			/// <summary>
			/// Id ???????
			/// </summary>
			                          public int      ClientId { get; set; } // int(10)
			[Identity, PrimaryKey(1)] public int      Id       { get; set; } // int(10)
			/// <summary>
			/// ???? ? ????? ?????????? ?????
			/// </summary>
			                          public DateTime LastPing { get; set; } // datetime(3)
		}
	}
}
